type User {
  info: UserInfo,
  uid: String,
  parties: Object,
  currentParty: String
}

type UserInfo {
  email: String
}

path /users/{userId} is User {}

path /users/{userId}/info is UserInfo {
  write() { isUser(userId) }
}

path /users/{userId}/parties {
  read() { true }
}

path /users/{userId}/currentParty {
  read() { true }
}

path /users/{userId}/currentParty/{partyId} {
  validate() { doesPartyExist(partyId) && isPartyPlayer(partyId) && root.users[userId].parties[partyId] !== null }
  write() { isPartyPlayer(partyId) || isPartyMaster(partyId) }
}

path /users/{userId}/parties/{partyId} {
  validate() { doesPartyExist(partyId) }
  read() { isUser(userId) }
  write() { isPartyMaster(partyId) }
}

isUser(userId) {
  userId === auth.uid
}
